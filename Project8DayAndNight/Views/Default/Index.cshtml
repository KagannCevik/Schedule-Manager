

@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Takvim Uygulaması</title>
    <style>
        
        body { margin:0; font-family:'Segoe UI',Arial,sans-serif; background:linear-gradient(120deg,#e0eafc 0%,#cfdef3 100%); color:#222;}
        .navbar { background:linear-gradient(90deg,#3c8dbc 60%,#5e60ce 100%); color:#fff; padding:1.2rem 2rem; display:flex; justify-content:space-between; align-items:center; font-size:1.2rem; letter-spacing:1px; box-shadow:0 2px 8px rgba(60,141,188,0.1);}
        .navbar a { color:#fff; margin-left:1.5rem; text-decoration:none; font-weight:500; transition:color 0.2s;}
        .navbar a:hover { color:#ffd166;}
        main { display:flex; max-width:1200px; margin:2.5rem auto; gap:2.5rem;}
        .sidebar { background:#fff; padding:2rem 1.5rem; border-radius:16px; width:270px; box-shadow:0 4px 24px rgba(60,141,188,0.08); display:flex; flex-direction:column; align-items:stretch;}
        .sidebar h2 { margin-top:0; color:#3c8dbc; letter-spacing:1px;}
        .categories { margin-bottom:1.2rem;}
        .categories label { display:inline-block; background:#e0eafc; color:#3c8dbc; border-radius:4px; padding:0.2rem 0.7rem; margin:0 0.3rem 0.3rem 0; font-size:0.95rem;}
        #event-list { list-style:none; padding:0; margin-bottom:1.2rem; min-height:40px;}
        #event-list li { margin-bottom:0.5rem; padding:0.5rem 0.7rem; border-radius:6px; color:#fff; font-size:0.97rem; font-weight:500; cursor:grab; box-shadow:0 2px 8px rgba(60,141,188,0.08); user-select:none; display:flex; align-items:center; gap:0.5rem;}
        #event-list li .cat { font-size:0.85em; background:#fff; color:#3c8dbc; border-radius:3px; padding:0 0.4em; margin-left:auto;}
        #event-list li .delete-btn { background:none; border:none; color:#fff; margin-left:0.5em; cursor:pointer; font-size:1.1em; transition:color 0.2s;}
        #event-list li .delete-btn:hover { color:#ff5252;}
        #event-form { display:flex; flex-wrap:wrap; gap:0.3rem; margin-top:auto; align-items:center;}
        #event-form input[type="text"] { flex:1 1 100px; min-width:0; padding:0.4rem; border:1px solid #bdbdbd; border-radius:4px; font-size:1rem;}
        .color-palette { display:flex; gap:0.2rem; flex:0 0 auto; }
        .color-swatch { width:24px; height:24px; border-radius:50%; border:2px solid #fff; cursor:pointer; box-shadow:0 1px 4px rgba(60,141,188,0.12); }
        .color-swatch.selected { border:2px solid #3c8dbc; }
        #event-form select { border-radius:4px; border:1px solid #bdbdbd; padding:0.3rem 0.5rem; font-size:0.97rem; flex:1 1 80px; min-width:0;}
        #event-form button { background:linear-gradient(90deg,#3c8dbc 60%,#5e60ce 100%); color:#fff; border:none; border-radius:4px; padding:0.4rem 0.8rem; cursor:pointer; font-weight:600; font-size:1rem; transition:background 0.2s; flex:0 0 auto;}
        #event-form button:hover { background:linear-gradient(90deg,#5e60ce 60%,#3c8dbc 100%);}
        .calendar-section { flex:1; background:#fff; border-radius:16px; box-shadow:0 4px 24px rgba(60,141,188,0.08); padding:2rem 2.5rem; min-width:0;}
        .calendar-header { display:flex; justify-content:center; align-items:center; gap:1.5rem; margin-bottom:1.5rem;}
        .calendar-header button { background:linear-gradient(90deg,#3c8dbc 60%,#5e60ce 100%); color:#fff; border:none; border-radius:4px; padding:0.4rem 1.2rem; font-size:1.3rem; cursor:pointer; font-weight:600; transition:background 0.2s;}
        .calendar-header button:hover { background:linear-gradient(90deg,#5e60ce 60%,#3c8dbc 100%);}
        .calendar { width:100%; border-collapse:collapse; table-layout:fixed;}
        .calendar th, .calendar td { width:14.28%; height:80px; text-align:right; vertical-align:top; border:1px solid #e0e0e0; padding:0.5rem 0.5rem 0.5rem 0.7rem; position:relative; background:#f8fafc; transition:background 0.2s;}
        .calendar th { background:#e0eafc; color:#3c8dbc; font-weight:700; font-size:1.05rem; letter-spacing:1px;}
        .calendar td { cursor:pointer;}
        .calendar td.range { background:#ffd166 !important;}
        .calendar td .event-dot { display:inline-block; width:14px; height:14px; border-radius:50%; margin-top:8px; margin-right:4px; vertical-align:middle; cursor:pointer; box-shadow:0 1px 4px rgba(60,141,188,0.12); border:2px solid #fff; transition:box-shadow 0.2s;}
        .calendar td .event-dot:hover { box-shadow:0 2px 8px rgba(60,141,188,0.25); border:2px solid #3c8dbc;}
        .calendar td .event-title { display:inline-block; margin-left:2px; font-size:0.95rem; color:#333; vertical-align:middle; max-width:80px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;}
        .calendar td .event-cat { display:inline-block; font-size:0.8em; background:#fff; color:#3c8dbc; border-radius:3px; padding:0 0.4em; margin-left:2px; vertical-align:middle;}
        .calendar td .delete-btn { background:none; border:none; color:#888; margin-left:0.3em; cursor:pointer; font-size:1.1em; transition:color 0.2s; vertical-align:middle;}
        .calendar td .delete-btn:hover { color:#ff5252;}
        media (max-width:900px) {
            main{flex-direction:column;}
            .sidebar{width:100%;margin-bottom:2rem;}
            .calendar-section{padding:1rem 0.5rem;}
            #event-form {flex-direction:column; align-items:stretch;}
            #event-form input, #event-form select, #event-form button {width:100%; margin-bottom:0.5rem;}
            .color-palette {justify-content:flex-start;}
        
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="navbar-title">Takvim Uygulaması</div>
        <div class="navbar-links">
            <a href="#">Ana Sayfa</a>
            <a href="/Default/Index/">İletişim</a>
            <a href="/Default/Index2">Takvim</a>
        </div>
    </nav>
    <main>
        <aside class="sidebar">
            <h2>Kategoriler</h2>
            <div class="categories" id="category-list"></div>
            <h2>Etkinlikler</h2>
            <ul id="event-list"></ul>
            <form id="event-form" autocomplete="off">
                <input type="text" id="event-title" placeholder="Başlık" required>
                <div class="color-palette" id="color-palette"></div>
                <select id="event-category"></select>
                <button type="submit">+</button>
            </form>
            <div style="margin-top:1.5rem; font-size:0.95em; color:#3c8dbc;">
                <b>Aralık eklemek için:</b><br>
                1. Etkinliğe tıkla<br>
                2. Takvimde ilk ve son günü sırayla tıkla
            </div>
        </aside>
        <section class="calendar-section">
            <div class="calendar-header">
                <button id="prev-month">&lt;</button>
                <span id="month-year"></span>
                <button id="next-month">&gt;</button>
            </div>
            <table class="calendar" id="calendar"></table>
        </section>
    </main>
    <script>
        // --- RENK PALETİ ---
        const colorOptions = [
            "#3c8dbc", "#5e60ce", "#ffd166", "#00b894", "#ff5252", "#fd79a8", "#636e72", "#e17055"
        ];
        let selectedColor = colorOptions[0];

        // --- VERİ YAPILARI ---
        let sidebarEvents = []; // {id, title, color, category}
        let calendarEvents = []; // {id, title, color, category, start, end}
        let currentDate = new Date();
        let categories = [];

        async function fetchCategories() {
            const res = await fetch('/Calendar/GetCategories');
            categories = await res.json();
            renderCategories();
        }

        async function fetchEvents() {
            const res = await fetch('/Calendar/GetEvents');
            calendarEvents = await res.json();
            renderCalendar(currentDate);
        }

        async function saveEventToServer(event) {
            await fetch('/Calendar/AddEvent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `title=${encodeURIComponent(event.title)}&color=${encodeURIComponent(event.color)}&category=${encodeURIComponent(event.category)}&start=${event.start}&end=${event.end}`
            });
            await fetchEvents();
        }

        (async function init() {
            renderColorPalette();
            await fetchCategories();
            await fetchEvents();
            renderSidebarEvents();
        })();

        // --- DOM ELEMENTLERİ ---
        const eventList = document.getElementById('event-list');
        const eventForm = document.getElementById('event-form');
        const eventTitle = document.getElementById('event-title');
        const eventCategory = document.getElementById('event-category');
        const calendar = document.getElementById('calendar');
        const monthYear = document.getElementById('month-year');
        const prevMonthBtn = document.getElementById('prev-month');
        const nextMonthBtn = document.getElementById('next-month');
        const categoryList = document.getElementById('category-list');
        const colorPalette = document.getElementById('color-palette');

        // --- RENK PALETİNİ RENDER ET ---
        function renderColorPalette() {
            colorPalette.innerHTML = '';
            colorOptions.forEach(color => {
                const swatch = document.createElement('div');
                swatch.className = 'color-swatch' + (color === selectedColor ? ' selected' : '');
                swatch.style.background = color;
                swatch.onclick = () => {
                    selectedColor = color;
                    renderColorPalette();
                };
                colorPalette.appendChild(swatch);
            });
        }

        // --- KATEGORİLERİ RENDER ET (hem sidebar hem form için) ---
        function renderCategories() {
            // Sidebar
            categoryList.innerHTML = '';
            categories.forEach(cat => {
                const label = document.createElement('label');
                label.textContent = cat;
                categoryList.appendChild(label);
            });
            // Form
            eventCategory.innerHTML = '';
            categories.forEach(cat => {
                const opt = document.createElement('option');
                opt.value = cat;
                opt.textContent = cat;
                eventCategory.appendChild(opt);
            });
        }

        // --- SIDEBAR ETKİNLİKLERİNİ RENDER ET ---
        function renderSidebarEvents() {
            eventList.innerHTML = '';
            if (sidebarEvents.length === 0) {
                eventList.innerHTML = '<li style="background:#bdbdbd;cursor:default;">Etkinlik yok</li>';
                return;
            }
            sidebarEvents.forEach(ev => {
                const li = document.createElement('li');
                li.textContent = ev.title;
                li.style.background = ev.color;
                li.dataset.id = ev.id;
                const cat = document.createElement('span');
                cat.className = 'cat';
                cat.textContent = ev.category;
                li.appendChild(cat);
                // Silme butonu
                const del = document.createElement('button');
                del.className = 'delete-btn';
                del.innerHTML = '🗑️';
                del.title = "Sil";
                del.onclick = (e) => { e.stopPropagation(); deleteSidebarEvent(ev.id); };
                li.appendChild(del);
                li.addEventListener('click', () => startRangeMode(ev.id));
                li.setAttribute('draggable', 'true');
                li.addEventListener('dragstart', onSidebarEventDragStart);
                eventList.appendChild(li);
            });
        }

        // --- TAKVİMİ RENDER ET ---
        function renderCalendar(date) {
            calendar.innerHTML = '';
            const year = date.getFullYear();
            const month = date.getMonth();
            monthYear.textContent = `${date.toLocaleString('tr-TR', { month: 'long' })} ${year}`;
            const days = ['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'];
            let thead = '<thead><tr>' + days.map(d => `<th>${d}</th>`).join('') + '</tr></thead>';
            calendar.insertAdjacentHTML('beforeend', thead);

            const firstDay = new Date(year, month, 1);
            const lastDay = new Date(year, month + 1, 0);
            const startDay = (firstDay.getDay() + 6) % 7; // Pazartesi ile başlat
            const totalDays = lastDay.getDate();

            let html = '<tbody><tr>';
            for (let i = 0; i < startDay; i++) html += '<td></td>';

            for (let day = 1; day <= totalDays; day++) {
                const dateStrVal = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                // O günün etkinlikleri (aralıklar dahil)
                const dayEvents = calendarEvents.filter(ev => isBetween(dateToObj(dateStrVal), dateToObj(ev.start), dateToObj(ev.end)));
                let rangeClass = '';
                if (rangeMode.active && isBetween(dateToObj(dateStrVal), dateToObj(rangeMode.start), dateToObj(rangeMode.end))) {
                    rangeClass = 'range';
                }
                html += `<td data-date="${dateStrVal}" class="${rangeClass}">
                            <div style="font-weight:600;color:#5e60ce;">${day}</div>
                            ${dayEvents.map(ev => `
                                <span class="event-dot"
                                    style="background:${ev.color}"
                                    title="${ev.title}"
                                    data-id="${ev.id}"
                                    data-title="${ev.title}"
                                    data-color="${ev.color}"
                                    data-category="${ev.category}">
                                </span>
                                <span class="event-title" title="${ev.title}">${ev.title}</span>
                                <span class="event-cat">${ev.category}</span>
                                <button class="delete-btn" title="Sil" onclick="deleteCalendarEvent('${ev.id}', event)">🗑️</button>
                            `).join('')}
                        </td>`;
                if ((startDay + day) % 7 === 0 && day !== totalDays) html += '</tr><tr>';
            }
            html += '</tr></tbody>';
            calendar.insertAdjacentHTML('beforeend', html);

            // Drag & Drop için event ekle
            document.querySelectorAll('.calendar td[data-date]').forEach(td => {
                td.addEventListener('dragover', onCalendarCellDragOver);
                td.addEventListener('dragleave', onCalendarCellDragLeave);
                td.addEventListener('drop', onCalendarCellDrop);
                td.addEventListener('click', onCalendarCellClick);
            });

            // Etkinlik güncelleme için event ekle
            document.querySelectorAll('.calendar .event-dot').forEach(dot => {
                dot.addEventListener('click', onCalendarEventClick);
            });
        }

        // --- DRAG & DROP (tek gün) ---
        let draggedSidebarEventId = null;
        function onSidebarEventDragStart(e) {
            draggedSidebarEventId = e.target.dataset.id;
            e.dataTransfer.effectAllowed = "move";
        }
        function onCalendarCellDragOver(e) {
            e.preventDefault();
            this.classList.add('range');
        }
        function onCalendarCellDragLeave(e) {
            this.classList.remove('range');
        }
        function onCalendarCellDrop(e) {
            e.preventDefault();
            this.classList.remove('range');
            if (!draggedSidebarEventId) return;
            const date = this.getAttribute('data-date');
            const ev = sidebarEvents.find(ev => ev.id === draggedSidebarEventId);
            if (ev) {
                saveEventToServer({
                    title: ev.title,
                    color: ev.color,
                    category: ev.category,
                    start: date,
                    end: date
                }).then(() => {
                    sidebarEvents = sidebarEvents.filter(e => e.id !== draggedSidebarEventId);
                    renderSidebarEvents();
                });
            }
            draggedSidebarEventId = null;
        }

        // --- ARALIK MODU ---
        let rangeMode = { active: false, eventId: null, start: null, end: null, clickCount: 0 };
        function startRangeMode(eventId) {
            rangeMode = { active: true, eventId, start: null, end: null, clickCount: 0 };
            document.body.style.cursor = "crosshair";
        }
        function onCalendarCellClick(e) {
            if (!rangeMode.active) return;
            const date = this.getAttribute('data-date');
            if (rangeMode.clickCount === 0) {
                rangeMode.start = date;
                rangeMode.end = date;
                rangeMode.clickCount = 1;
            } else if (rangeMode.clickCount === 1) {
                rangeMode.end = date;
                let start = rangeMode.start, end = rangeMode.end;
                if (dateToObj(start) > dateToObj(end)) [start, end] = [end, start];
                const ev = sidebarEvents.find(ev => ev.id === rangeMode.eventId);
                if (ev) {
                    saveEventToServer({
                        title: ev.title,
                        color: ev.color,
                        category: ev.category,
                        start: start,
                        end: end
                    }).then(() => {
                        sidebarEvents = sidebarEvents.filter(e => e.id !== rangeMode.eventId);
                        renderSidebarEvents();
                    });
                }
                rangeMode = { active: false, eventId: null, start: null, end: null, clickCount: 0 };
                document.body.style.cursor = "";
            }
            renderCalendar(currentDate);
        }

        // --- TAKVİMDEKİ ETKİNLİĞİ GÜNCELLE ---
        function onCalendarEventClick(e) {
            e.stopPropagation();
            const id = this.dataset.id;
            const oldTitle = this.dataset.title;
            const oldColor = this.dataset.color;
            const oldCat = this.dataset.category;
            const newTitle = prompt("Yeni etkinlik başlığı:", oldTitle);
            if (newTitle === null) return;
            let newColor = prompt("Yeni renk (hex, ör: #ff0000):", oldColor);
            if (!/^#[0-9a-f]{6}$/i.test(newColor)) newColor = oldColor;
            let newCat = prompt("Yeni kategori:", oldCat);
            if (!categories.includes(newCat)) newCat = oldCat;
            updateEventOnServer({
                id: id,
                title: newTitle,
                color: newColor,
                category: newCat
            });
        }

        // --- YENİ ETKİNLİK EKLE ---
        eventForm.addEventListener('submit', e => {
            e.preventDefault();
            const title = eventTitle.value.trim();
            const color = selectedColor;
            const category = eventCategory.value;
            if (!title) return;
            sidebarEvents.push({ id: uuid(), title, color, category });
            renderSidebarEvents();
            eventForm.reset();
            selectedColor = colorOptions[0];
            renderColorPalette();
        });

        // --- ETKİNLİK SİLME ---
        function deleteSidebarEvent(id) {
            sidebarEvents = sidebarEvents.filter(ev => ev.id !== id);
            renderSidebarEvents();
        }
        window.deleteCalendarEvent = function (id, e) {
            if (e) e.stopPropagation();
            deleteEventFromServer(id);
        }

        // --- AY DEĞİŞTİRME ---
        prevMonthBtn.onclick = () => {
            currentDate.setMonth(currentDate.getMonth() - 1);
            renderCalendar(currentDate);
        };
        nextMonthBtn.onclick = () => {
            currentDate.setMonth(currentDate.getMonth() + 1);
            renderCalendar(currentDate);
        };

        // --- ESC ile aralık modunu iptal et ---
        document.addEventListener('keydown', function (e) {
            if (e.key === "Escape" && rangeMode.active) {
                rangeMode = { active: false, eventId: null, start: null, end: null, clickCount: 0 };
                document.body.style.cursor = "";
                renderCalendar(currentDate);
            }
        });

        // --- MSSQL ENTEGRASYONU (AJAX) ---
        async function fetchCategories() {
            const res = await fetch('/Calendar/GetCategories');
            categories = await res.json();
            renderCategories();
        }
        async function fetchEvents() {
            const res = await fetch('/Calendar/GetEvents');
            calendarEvents = await res.json();
            renderCalendar(currentDate);
        }
        async function saveEventToServer(event) {
            await fetch('/Calendar/AddEvent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `title=${encodeURIComponent(event.title)}&color=${encodeURIComponent(event.color)}&category=${encodeURIComponent(event.category)}&start=${event.start}&end=${event.end}`
            });
            await fetchEvents();
        }
        async function deleteEventFromServer(id) {
            await fetch('/Calendar/DeleteEvent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `id=${id}`
            });
            await fetchEvents();
        }
        async function updateEventOnServer(event) {
            await fetch('/Calendar/UpdateEvent', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `id=${event.id}&title=${encodeURIComponent(event.title)}&color=${encodeURIComponent(event.color)}&category=${encodeURIComponent(event.category)}`
            });
            await fetchEvents();
        }

        // --- YARDIMCI FONKSİYONLAR ---
        function uuid() {
            return '_' + Math.random().toString(36).substr(2, 9);
        }
        function dateToObj(str) {
            const [y, m, d] = str.split('-').map(Number);
            return new Date(y, m - 1, d);
        }
        function isBetween(date, start, end) {
            return date >= start && date <= end;
        }

        // --- BAŞLANGIÇTA VERİLERİ ÇEK ---
        (async function init() {
            renderColorPalette();
            await fetchCategories();
            await fetchEvents();
            renderSidebarEvents();
        })();
    </script>
</body>
</html>